#+TITLE: Notes on installing archlinux from scratch
#+AUTHOR: Xavier Garrido
#+DESCRIPTION: In this note, we describe the different operations for installing archlinux

* Download latest iso file
Grab the latest iso file from https://www.archlinux.org/download/. Then copy it to a USB stick and
make it bootable with the following command
#+BEGIN_SRC shell
  sudo dd bs=4M if=archlinux-${latest}-x86_64.iso of=/dev/sda conv=fsync
#+END_SRC

* After booting on archlinux ISO file
Start loading the french keymap
#+BEGIN_SRC shell
  loadkeys fr
#+END_SRC

* Create and format the partitions :
First look if any partition is already present
#+BEGIN_SRC shell
  fdisk -l
#+END_SRC
If yes, then either use them and go directly to the "Mounting" part or, format
the disk using =fisk= or =cfdisk= utility.

Different strategies can then be adopted (see
https://wiki.archlinux.org/index.php/Partitioning). For the time being, I have
adopted the following and pretty simple one :
- a 20 Gb root partition
- all the other bytes for the =/home= partition

To do a fresh install, enter into =fdisk= utility. Inside =fisk= prompt, delete
all previous partition by typing =d= several times until there are no more
partition. Then create a new one by typing =n=, use default number value as well
as starting block and then set the 20 Gb size by writing =+20G=. Repeat the
operation for the =/home= partition. Finally, write the new table partition
using =w= letter.

Example of =fdisk= partition :

|----------------+------+------------------|
| Device         | Size | Type             |
| /dev/nvme0n1p1 | 512M | EFI System       |
| /dev/nvme0n1p2 | 1G   | Linux swap       |
| /dev/nvme0n1p3 | 50G  | Linux filesystem |
| /dev/nvme0n1p4 | 425G | Linux filesystem |
|----------------+------+------------------|

Format partition is done with =mkfs= utility
#+BEGIN_SRC shell
  mkfs.fat -F32 /dev/nvme0n1p1
  mkfs.ext4 /dev/nvme0n1p3
  mkfs.ext4 /dev/nvme0n1p4
  mkswap /dev/nvme0n1p2
  swapon /dev/nvme0n1p2
#+END_SRC

* Mount the partitions
#+BEGIN_SRC shell
  mount /dev/nvme0n1p3 /mnt
  mkdir /mnt/home && mount /dev/nvme0n1p4 /mnt/home
#+END_SRC

Mount also the EFI partition
#+BEGIN_SRC shell
  mount /dev/nvme0n1p1 /mnt/efi
#+END_SRC
* Connect to the internet
Use the =wifi-menu= utility, choose the wifi name and set the WPA key. To use
=eduroam= network, first create a =wlp12s0-eduroam= file inside =/etc/netctl=
directory. Edit it and add the following lines
#+BEGIN_SRC shell
  Interface=wlp12s0
  Connection=wireless
  Security=wpa-configsection
  IP=dhcp
  WPAConfigSection=(
      'ssid="eduroam"'
      'proto=RSN'
      'key_mgmt=WPA-EAP'
      'pairwise=CCMP'
      'auth_alg=OPEN'
      'eap=PEAP'
      'identity="XXXX.XXXX@u-psud.fr"'
      'password="XXXX"'
  )
#+END_SRC
Finally, start the connection with the above profile by doing
#+BEGIN_SRC shell
  netctl start wlp12s0-eduroam
#+END_SRC
* Install the base system
#+BEGIN_SRC sh
  pacstrap /mnt base base-devel linux linux-firmware
#+END_SRC

If you get errors like
#+BEGIN_SRC shell
  error: could not open file /mnt/var/lib/pacman/sync/core.db: Unrecognized archive format
#+END_SRC
just remove the corresponding file /i.e./ =/mnt/var/lib/pacman/sync/core.d=. These errors mainly come
from broken download links and thus corrupted database.

* Configure the system
** Generate a fstab
#+BEGIN_SRC shell
  genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC
** Next =chroot= into our newly installed system
#+BEGIN_SRC shell
  arch-chroot /mnt
#+END_SRC
** Symlink /etc/localtime
#+BEGIN_SRC shell
  ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
  hwclock --systohc --utc
#+END_SRC
** Generate =locale-gen=
Uncomment the lines starting with =fr_FR= in =/etc/locale.gen= and then do
#+BEGIN_SRC shell
  sed -i -e 's/#\(fr_FR.*UTF\)/\1/' /etc/locale.gen
  locale-gen
#+END_SRC
** Finally do
#+BEGIN_SRC shell
  echo LANG="fr_FR.UTF-8" > /etc/locale.conf
  echo KEYMAP="fr-latin1" > /etc/vconsole.conf
  export LANG=fr_FR.UTF-8
#+END_SRC
** Configuring the Console Keymap                               :deprecated:
#+BEGIN_SRC shell
  cd /usr/share/kbd/keymaps/i386/azerty
#+END_SRC
Copy your default keymap (=fr-pc.map.gz=) to a new file =fr-pc-personal.map.gz=
Gunzip the new map file. Edit =fr-pc-personal.map= using your favorite editor.
- Swap CapsLock with Escape (Vim)
make keycode 1 = Caps_Lock and keycode 58 = Escape
Gzip the map file
Change the default keyboard layout file that will be used by editing
=/etc/vconsole.conf= and adding =KEYMAP=fr-pc-personal=
** Set the hostname
To set a hostname to the machine different from =localhost= (laptop machines are
recognized as =garrido-laptop=, do
#+BEGIN_SRC shell
  echo "garrido-laptop" > /etc/hostname
#+END_SRC

** Sort mirrorlist
#+BEGIN_SRC shell
  pacman -S pacman-contrib
  curl -s "https://www.archlinux.org/mirrorlist/?country=FR&country=GB&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
#+END_SRC

** Create a user account
First set the root password
#+BEGIN_SRC shell
  passwd
#+END_SRC
and install =sudo= command with =nano= editor
#+BEGIN_SRC shell
  pacman -Sy sudo nano
#+END_SRC
Once you've installed sudo, you can allow your new user to run it by editing your sudoers file:
#+BEGIN_SRC shell
  EDITOR=nano visudo
#+END_SRC
Scroll down until you find this line and uncomment it:
#+BEGIN_SRC shell
  %wheel ALL=(ALL) ALL
#+END_SRC

Before creating a user account, install zshell
#+BEGIN_SRC shell
  pacman -S zsh
#+END_SRC
Create a user account
#+BEGIN_SRC shell
  useradd -m -g users -G wheel,storage,power -s /bin/zsh garrido
  passwd garrido
#+END_SRC

** Install your GRUB bootloader
#+BEGIN_SRC shell
  pacman -Sy grub efibootmgr
  grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
  grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC
Target is EFI bootloader (see
https://wiki.archlinux.org/index.php/Installation_guide#Mount_the_file_systems and https://wiki.archlinux.org/index.php/GRUB#Installation_2)

** Install gnome
#+BEGIN_SRC shell
  pacman -Sy gnome gnome-extra chrome-gnome-shell
#+END_SRC

** Set GDM to graphically connect
#+BEGIN_SRC shell
  systemctl enable gdm.service
#+END_SRC

** Enable network manager
#+BEGIN_SRC shell
  systemctl enable NetworkManager
#+END_SRC

** Exit, unmount partitions and reboot
#+BEGIN_SRC shell
  exit
  umount -R /mnt
  reboot
#+END_SRC

* Setting sound, video, X window and package manager
** Network setup
Event if you generate a profile /via/ the [[Connect to the internet]] section, you
may need to generate again your network profile. To do that just copy-paste the
configuration given in [[Connect to the internet]] section into =/etc/netctl= (with
root privilege /i.e./ using =sudo=) and then start the network by doing
#+BEGIN_SRC shell
  sudo netctl start wlp12s0-eduroam
#+END_SRC

** Sound, video and mouse drivers
- Get sound
  #+BEGIN_SRC shell
    sudo pacman -S alsa-utils
    alsamixer
    speaker-test -c 2
  #+END_SRC
  To deactivate the PC speaker beeps, you can do temporarly =sudo rmmod
  pcspkr=. To apply it globally follow this [[https://wiki.archlinux.org/index.php/Disable_PC_speaker_beep][page]] and try one of the recommending
  method.
- Install video driver (Intel)
  #+BEGIN_SRC shell
    sudo pacman -S xf86-video-intel
  #+END_SRC
- Install mouse driver
  #+BEGIN_SRC shell
    sudo pacman -S xf86-input-synaptics
  #+END_SRC

** X window
+ Install X window system
#+BEGIN_SRC sh
  sudo pacman -S xorg-server xorg-xinit xorg-server-utils
#+END_SRC
+ Test default X environnement
#+BEGIN_SRC sh
  sudo pacman -S xorg-twm xorg-xclock xterm
  startx
#+END_SRC

** Package managers
*** =yaourt=
=yaourt= is a =pacman= front-end which support arch user repository /aka/
[[https://aur.archlinux.org/][AUR]]. To use it as default package manager, add the following line into
=/etc/pacman.conf=
#+BEGIN_SRC sh
  [archlinuxfr]
  Server = http://repo.archlinux.fr/$arch
#+END_SRC
Then do
#+BEGIN_SRC sh
  sudo pacman -Sy yaourt
#+END_SRC

*** =python-pip=
Some =python= applications can be installed through =pacman/yaourt= but others
are easily installed using =pip= manager. To install =pip=, just do
#+BEGIN_SRC shell
  yaourt -S python-pip
#+END_SRC
By the way, this will automatically installed the latest version of =python=
(currently the 3.5 version).

* Package installation
#+BEGIN_SRC shell
  yaourt -S openssh rsync wget
#+END_SRC

Install git and subversion
#+BEGIN_SRC shell
yaourt -S git subversion
#+END_SRC

Install ubuntu font
#+BEGIN_SRC shell
  yaourt -S ttf-ubuntu-font-family
#+END_SRC

Install terminator
#+BEGIN_SRC shell
  yaourt -S terminator
#+END_SRC

Install emacs
#+BEGIN_SRC shell
  yaourt -S emacs
#+END_SRC

Install chromium
#+BEGIN_SRC shell
  yaourt -S chromium
#+END_SRC

Install thunderbird
#+BEGIN_SRC shell
  yaourt -S thunderbird
#+END_SRC

Install xfce4 stuff
#+BEGIN_SRC shell
yaourt -S xfce4-notifyd thunar xfce4-volman file-roller
#+END_SRC

Misc.
#+BEGIN_SRC shell
yaourt -S unzip mlocate flashplugin
#+END_SRC

* Install Openbox and set-up the working environment
** Openbox
Openbox is a *lightweight* with respect to other window environment, powerful,
and highly configurable stacking window manager with extensive standards
support.
#+BEGIN_SRC shell
  yaourt -S openbox
#+END_SRC

In addition to =openbox=, =obconf= allows to easily configure the window
manager. =tint2=, =hsetroot= and =dunst= are respectively used as
windows/applications panel, desktop wallpaper and popup notification.
#+BEGIN_SRC shell
  yaourt -S obconf tint2 hsetroot dunst
#+END_SRC

** dotfiles
Most of the configuration parameters are stored through dotfiles that stay in
the home directory. To handle this set of files, we use the [[https://pypi.python.org/pypi/dotfiles][=dotfiles=]] tool to
sync a given repository of files with the home directory. To install =dotfiles=,
you need to have =python-pip= installed (see [[Package managers]])
#+BEGIN_SRC shell
  pip install --user dotfiles
#+END_SRC
=dotfiles= binary is installed within =~/.local/bin= directory. Either export
this directory to your path and run =dotfiles= by typing
=~/.local/bin/dotfiles=.

Then, you need to checkout the repository of dotfiles that you can find
https://github.com/xgarrido/dotfiles.
#+BEGIN_SRC shell
  mkdir -p ~/Development/dotfiles
  git clone https://github.com/xgarrido/dotfiles ~/Development/dotfiles
#+END_SRC

Finally install dotfiles by doing
#+BEGIN_SRC shell
  ~/.local/bin/dotfiles -R ~/Development/dotfiles --sync
#+END_SRC
Some directories are not linked so you have to do it
#+BEGIN_SRC shell
  mkdir -p ~/.config
  ln -sf ~/Development/dotfiles/openbox ~/.config/
  ln -sf ~/Development/dotfiles/terminator ~/.config/
#+END_SRC

** =myrepos=
The [[https://github.com/joeyh/myrepos][=myrepos=]] application a tool to manage all your version control repositories
given a =~/.mrconfig= file. To ensure everything will be checkout, you will need
to install =subversion= VCS.
#+BEGIN_SRC shell
  yaourt -S subversion
#+END_SRC

Checkout the =myrepos= repository and install it
#+BEGIN_SRC shell
  git checkout https://github.com/joeyh/myrepos ~/Development/github/myrepos
  cd ~/Development/github/myrepos && sudo make install
#+END_SRC

Finally run the =mr= binary within the home directory /i.e./
#+BEGIN_SRC shell
  cd ~ && mr checkout
#+END_SRC

* Running =openbox=

Given you have successfully fill the previous item, =openbox= can be run through
tty terminal by typing =startx=.
