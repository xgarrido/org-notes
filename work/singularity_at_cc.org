#+TITLE: Docker, Singularity & co
#+AUTHOR: Xavier Garrido

This note explains how the CMB software (=planck/clik=, =CLASS=, =CAMEL=,...) have been built /via/ a
[[https://www.docker.com/][=docker=]] container, tested and run through [[https://www.sylabs.io/][=singularity=]] at CC, Lyon. If you just want to learn how
to use =singularity= @ Lyon, you can go directly to section [[Singularity]] and skip the two first
sections.

* Building CMB software suite

CMB software have been installed and tested on two different machine setup :
1) An [[http://releases.ubuntu.com/16.04.5/][ubuntu 16.04]] machine
2) A [[https://www.centos.org/download/][CentOS 7]] machine

Actually all the code has been compiled without errors on the ubuntu machine but the =camb= software
fails to install on the CentOS 7 machine. For the time being and within this note, we will use the
ubuntu docker image.

** Dockerfile repository

To create the docker image containing all the software pieces, we need to create a recipe named a
/Dockerfile/ which hold all the needed commands such as installing system libraries (=blas=,
=g++/gfortran= compilers...). The =Dockerfile= can be found [[https://github.com/xgarrido/dockerfiles/tree/master/cmb/ubuntu/16.04][here]].

If you have a proper installation of =docker=, you can build the image with the following command
after having cloned the =git= repository with the =Dockerfile=
#+BEGIN_SRC shell
  $ git clone https://github.com/xgarrido/dockerfiles ~/dockerfiles
  $ cd ~/dockerfiles/cmb/ubuntu/16.04
  $ docker build -t cmb/ubuntu16.04 .
#+END_SRC
where =cmb/ubuntu16.04= is the tag of your image. Depending of your host machine, the installation
process can take few minutes. At the end, you can see you new docker image with =$ docker images=
command.

** Running the =cmb/ubuntu16.04= image

If the everything gets fine during the previous section, you now have a container that can run all
the CMB software. To get into your =cmb/ubuntu16.04= image you can do (from everywhere and not anymore
into the =Dockerfile= directory)
#+BEGIN_SRC shell
  $ docker run --rm -it cmb/ubuntu16:latest /bin/zsh
#+END_SRC

This will start the latest =cmb/ubuntu16.04= image in interactive mode (=-i=) with TTY allocation (=-t=)
and set a =zsh= shell. You are currently logged as =cmb= user. When you will leave the image (by typing
=exit= for instance), the container (not the image) will be removed (=--rm=). You should now see a
colored prompt with time, shell and the current hash tag of the =docker= image. Be careful with =docker=
options since their respective positions matters.

Setting CMB software suite needs to source environment variables. You can do it *within your
container* in two different ways
#+BEGIN_SRC shell
  $ source ~/software/cmb_setup.sh
#+END_SRC
of using the =pkgman= utilities
#+BEGIN_SRC shell
  $ pkgman setup @cmb
#+END_SRC

You will get all the binaries such as =CAMEL= binaries (=writeChi2=, =Profile=, =mcmc=) and you can also
start =ipython= and import =camel= or =matplotlib= libraries. Nevertheless, X11 emulation is disabled. You
can [[https://github.com/xgarrido/dockerfiles/blob/master/README.org][read]] how to achieve X11 forward.

** Binding the =data= directory

To reduce the image size (in order to push it into a "server", see [[Docker Hub]] section), the Planck,
=pico= or =CAMEL= data have not been pushed into the image. To use the code, you need a local version of
the data and you need to bind this local version with the =/home/cmb/data= directory in the
container. Your installation of data must look like that
#+BEGIN_SRC shell
$ ls /where/data/is/located/on/your/computer/*
data/camel_data:
BAO  HighEll  Hillipop  JLA  Lollipop  bbn

data/pico_data:
pico3_tailmonty_v34.dat

data/planck_data:
PLC_2.0  hi_l  lensing  low_l
#+END_SRC

You can now bind your local data directory with the one inside your =docker= container
#+BEGIN_SRC shell
  $ docker run --rm -it -v /where/data/is/located/on/your/computer:/home/cmb/data cmb/ubuntu16.04:latest /bin/zsh
#+END_SRC
If you go inside the =/home/cmb/data= directory, you will get the same directories as in your
computer. The =-v= option is pretty self-explanatory and we will use a similar technique when dealing
with =singularity= software. An important point is the fact that binding directories allow you to
modify their content from your =docker= container (try to do =$ touch dummy= in the =/home/cmb/data=
directory and the =dummy= file will be instantanously created on your computer).

* Docker Hub

Building from scratch all the CMB software is a nice exercice but you may wonder how can I get only
the image that someone else has already built to just use it. Actually, the image is available on
the [[https://hub.docker.com/][docker hub]] which serves as a kind of server for docker images. You can then just pull the image
from https://hub.docker.com/r/xgarrido/cmb_ubuntu1604 and get a working copy of all CMB software
without needing to reconstruct the whole chain. Pulling can be done by the following command
#+BEGIN_SRC shell
  $ docker pull xgarrido/cmb_ubuntu1604
#+END_SRC
Then, you can play with the image just like before by using its name =xgarrido/cmb_ubuntu1604=.
* Singularity
** Pulling and running image from =docker=

=Singularity= is another service of containers but dedicated to scientific applications (support for
MPI for instance). In the same way as =docker=, user can create a recipe to build a =singularity=
image. Since we already have a working =docker= image and since =singularity= can import and load
=docker= images, we will stay with our CMB =docker= image and investigate how we can handle =singularity=
at CC. A short description of =singularity= at CC can be found [[https://indico.in2p3.fr/event/17209/contributions/60585/attachments/48733/61680/singularity-journees-plateforme-v0.1.pdf][here]].

*Disclaimer* : =singularity= binary has been installed by Lyon staff and should be available as soon as
you have the =/bin= directory within your =PATH= environment. One issue you may face is =singularity= use
a cache directory which by default is located into your home directory /i.e./
=$HOME/.singularity=. Given the space limitation in =$HOME= at Lyon, I recommand to change the
=singularity= cache path to some place where you have more space. You should do
#+BEGIN_SRC shell
  $ export SINGULARITY_CACHEDIR=/place/where/you/have/enough/space
#+END_SRC

First we need to pull our =docker= image into =singularity=. Just do
#+BEGIN_SRC shell
  $ singularity pull docker://xgarrido/cmb_ubuntu1604
#+END_SRC
The previous command should create a =cmb_ubuntu1604.simg= file located in =SINGULARITY_CACHEDIR=. You
can now run this =singularity= image /via/
#+BEGIN_SRC shell
  $ singularity run $SINGULARITY_CACHEDIR/cmb_ubuntu1604.simg
#+END_SRC
You are now within the =cmb_ubuntu1604.simg= image where you can source the
=/home/cmb/software/cmb_setup.sh= file to load all requirements for CMB analysis.

When running the previous command you should get the following warning
#+BEGIN_SRC shell
  WARNING: Could not chdir to home: $HOME
#+END_SRC
where =$HOME= should point to your home directory. As far as I can understand how =singularity= is used
at CC Lyon, the =HOME= directory at Lyon is automatically mount in the =singularity= =/home= path but
since we use within the docker image another username namely =cmb=, the mount just fails. As we will
see the warning does not hurt and CMB software can be run safely.

As explained before, to reduce image file, the data needed by CMB software have not been pulled into
the =docker/singularity= image. You need to bind the =/home/cmb/data= directory from your =singularity=
container to some local directory. For instance, you can run =singularity= with the following
directory binding
#+BEGIN_SRC shell
  $ singularity run -B /sps/planck/camel/CentOS7/data:/home/cmb/data $SINGULARITY_CACHEDIR/cmb_ubuntu1604.simg
#+END_SRC

** Creating a script and sending it to CC farm /via/ =qsub=

We now have a =singularity= image that can be used in standalone mode. We also have seen how to bind
directories in order to exchange files between the host and the =singularity= container. We will use
this technique to create a bash script + a =CAMEL= parameter file and to share it between your local
directory at Lyon and the =singularity= container.

To do the test, let's create a new directory
#+BEGIN_SRC shell
  $ mkdir $TMPDIR/singularity.d && cd $TMPDIR/singularity.d
#+END_SRC
Let's get and download a =CAMEL= parameter file
#+BEGIN_SRC shell
  $ wget https://gitlab.in2p3.fr/cosmotools/CAMEL/uploads/d717ac3b074d5cad8e18b578a739e87a/class_issue.par
#+END_SRC
and finally, let's create a script file named =class_issue.sh= with the following commands
#+BEGIN_SRC shell
  $ echo -n "#!/bin/bash\nsource /home/cmb/software/cmb_setup.sh; writeChi2 /mnt/singularity.d/class_issue.par" > class_issue.sh
  $ chmod u+x class_issue.sh
#+END_SRC
To execute the =singularity= image, we need to bind our local tmp directory =$TMPDIR= with the =/mnt=
directory in the =singularity= container (that's explain why the path to the =class_issue.par= file is
=/mnt/singularity.d/class_issue.par= in the shell script). The new =singularity= command look likes that
#+BEGIN_SRC shell
  $ singularity exec -B /sps/planck/camel/CentOS7/data:/home/cmb/data -B $TMPDIR:/mnt $SINGULARITY_CACHEDIR/cmb_ubuntu1604.simg /mnt/singularity.d/class_issue.sh
#+END_SRC
and the =writeChi2= binary should start. The =exec= option of =singularity= just run a command inside the
container and without any kind of interaction with the user (no interface, no prompt).

Finally, let's try to do the same thing with a =qsub= script
#+BEGIN_SRC shell
  $ echo -n "#!/bin/bash\nsingularity exec -B /sps/planck/camel/CentOS7/data:/home/cmb/data -B $TMPDIR:/mnt $SINGULARITY_CACHEDIR/cmb_ubuntu1604.simg /mnt/singularity.d/class_issue.sh" > job_singularity.sh
#+END_SRC
send it to CC farm /via/ =qsub= command
#+BEGIN_SRC shell
  $ qsub -P P_planck -q long -l os=cl7 job_singularity.sh
#+END_SRC

*Erratum* : actually the =TMPDIR= is a bad choice since this directory is not mounted when a =qjob= is
 sent. Everything should work fine as far as you mount/bind a visible directory. For instance you
 can move the =singularity.d= directory into =/sps/planck/Temp= and try again.
